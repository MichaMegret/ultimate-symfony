# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:  #permet de définir une valeur de paramètre pour les constructeur de tous les services
            $tva: 20 #Ici $text dans le constructeur de OrderController & SmsTexter


    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Controller\:
        resource: '../src/Controller'
        tags: ["controller.service_arguments"]

    App\Taxes\Detector:
        arguments:
            $seuil: 1000
            
    Cocur\Slugify\Slugify: ~

    App\Stripe\StripeService:
        arguments:
            $secretKey: '%env(STRIPE_SECRET_KEY)%'
            $publicKey: '%env(STRIPE_PUBLIC_KEY)%'


    # Exemple d'ajout de méthode aux écouteurs d'événements Symfony (Listener) en fonction du type d'event
    # App\EventDispatcher\PrenomListener:
    #     tags: 
    #         [
    #             {
    #                 name: kernel.event_listener, 
    #                 event: kernel.request, 
    #                 method: addPrenomToAttributes
    #             },
    #             {
    #                 name: kernel.event_listener, 
    #                 event: kernel.controller, 
    #                 method: test1
    #             },
    #             {
    #                 name: kernel.event_listener, 
    #                 event: kernel.response, 
    #                 method: test2
    #             }
    #         ]
